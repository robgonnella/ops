// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robgonnella/ops/internal/server (interfaces: Repo,Service)

// Package mock_server is a generated GoMock package.
package mock_server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "github.com/robgonnella/ops/internal/event"
	server "github.com/robgonnella/ops/internal/server"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddServer mocks base method.
func (m *MockRepo) AddServer(arg0 *server.Server) (*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServer", arg0)
	ret0, _ := ret[0].(*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServer indicates an expected call of AddServer.
func (mr *MockRepoMockRecorder) AddServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServer", reflect.TypeOf((*MockRepo)(nil).AddServer), arg0)
}

// GetAllServers mocks base method.
func (m *MockRepo) GetAllServers() ([]*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServers")
	ret0, _ := ret[0].([]*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServers indicates an expected call of GetAllServers.
func (mr *MockRepoMockRecorder) GetAllServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServers", reflect.TypeOf((*MockRepo)(nil).GetAllServers))
}

// GetServerByID mocks base method.
func (m *MockRepo) GetServerByID(arg0 string) (*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerByID", arg0)
	ret0, _ := ret[0].(*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerByID indicates an expected call of GetServerByID.
func (mr *MockRepoMockRecorder) GetServerByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerByID", reflect.TypeOf((*MockRepo)(nil).GetServerByID), arg0)
}

// GetServerByIP mocks base method.
func (m *MockRepo) GetServerByIP(arg0 string) (*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerByIP", arg0)
	ret0, _ := ret[0].(*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerByIP indicates an expected call of GetServerByIP.
func (mr *MockRepoMockRecorder) GetServerByIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerByIP", reflect.TypeOf((*MockRepo)(nil).GetServerByIP), arg0)
}

// RemoveServer mocks base method.
func (m *MockRepo) RemoveServer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServer indicates an expected call of RemoveServer.
func (mr *MockRepoMockRecorder) RemoveServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServer", reflect.TypeOf((*MockRepo)(nil).RemoveServer), arg0)
}

// UpdateServer mocks base method.
func (m *MockRepo) UpdateServer(arg0 *server.Server) (*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", arg0)
	ret0, _ := ret[0].(*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockRepoMockRecorder) UpdateServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockRepo)(nil).UpdateServer), arg0)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddOrUpdateServer mocks base method.
func (m *MockService) AddOrUpdateServer(arg0 *server.Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateServer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateServer indicates an expected call of AddOrUpdateServer.
func (mr *MockServiceMockRecorder) AddOrUpdateServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateServer", reflect.TypeOf((*MockService)(nil).AddOrUpdateServer), arg0)
}

// GetAllServers mocks base method.
func (m *MockService) GetAllServers() ([]*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServers")
	ret0, _ := ret[0].([]*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServers indicates an expected call of GetAllServers.
func (mr *MockServiceMockRecorder) GetAllServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServers", reflect.TypeOf((*MockService)(nil).GetAllServers))
}

// GetAllServersInNetworkTargets mocks base method.
func (m *MockService) GetAllServersInNetworkTargets(arg0 []string) ([]*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServersInNetworkTargets", arg0)
	ret0, _ := ret[0].([]*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServersInNetworkTargets indicates an expected call of GetAllServersInNetworkTargets.
func (mr *MockServiceMockRecorder) GetAllServersInNetworkTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServersInNetworkTargets", reflect.TypeOf((*MockService)(nil).GetAllServersInNetworkTargets), arg0)
}

// GetServer mocks base method.
func (m *MockService) GetServer(arg0 string) (*server.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", arg0)
	ret0, _ := ret[0].(*server.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockServiceMockRecorder) GetServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockService)(nil).GetServer), arg0)
}

// MarkServerOffline mocks base method.
func (m *MockService) MarkServerOffline(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkServerOffline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkServerOffline indicates an expected call of MarkServerOffline.
func (mr *MockServiceMockRecorder) MarkServerOffline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkServerOffline", reflect.TypeOf((*MockService)(nil).MarkServerOffline), arg0)
}

// StopStream mocks base method.
func (m *MockService) StopStream(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopStream", arg0)
}

// StopStream indicates an expected call of StopStream.
func (mr *MockServiceMockRecorder) StopStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStream", reflect.TypeOf((*MockService)(nil).StopStream), arg0)
}

// StreamEvents mocks base method.
func (m *MockService) StreamEvents(arg0 chan *event.Event) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEvents", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// StreamEvents indicates an expected call of StreamEvents.
func (mr *MockServiceMockRecorder) StreamEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEvents", reflect.TypeOf((*MockService)(nil).StreamEvents), arg0)
}
