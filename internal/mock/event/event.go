// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/robgonnella/ops/internal/event (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=../mock/event/event.go -package=mock_event . Manager
//
// Package mock_event is a generated GoMock package.
package mock_event

import (
	reflect "reflect"

	event "github.com/robgonnella/ops/internal/event"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// RegisterListener mocks base method.
func (m *MockManager) RegisterListener(arg0 event.EventType, arg1 chan event.Event) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterListener", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// RegisterListener indicates an expected call of RegisterListener.
func (mr *MockManagerMockRecorder) RegisterListener(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockManager)(nil).RegisterListener), arg0, arg1)
}

// RemoveListener mocks base method.
func (m *MockManager) RemoveListener(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveListener", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// RemoveListener indicates an expected call of RemoveListener.
func (mr *MockManagerMockRecorder) RemoveListener(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockManager)(nil).RemoveListener), arg0)
}

// Send mocks base method.
func (m *MockManager) Send(arg0 event.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send.
func (mr *MockManagerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockManager)(nil).Send), arg0)
}

// SendFatalError mocks base method.
func (m *MockManager) SendFatalError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendFatalError", arg0)
}

// SendFatalError indicates an expected call of SendFatalError.
func (mr *MockManagerMockRecorder) SendFatalError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFatalError", reflect.TypeOf((*MockManager)(nil).SendFatalError), arg0)
}
